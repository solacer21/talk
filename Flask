import os, json
from flask import Flask, request, abort
from dotenv import load_dotenv
from linebot import LineBotApi, WebhookHandler
from linebot.models import MessageEvent, TextMessage, TextSendMessage, JoinEvent
from linebot.exceptions import InvalidSignatureError
from langdetect import detect
from deep_translator import GoogleTranslator

load_dotenv()

CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
DEFAULT_TARGET = os.getenv("DEFAULT_TARGET", "zh-TW")

app = Flask(__name__)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

PREFS_FILE = "user_langs.json"
if not os.path.exists(PREFS_FILE):
    with open(PREFS_FILE, "w", encoding="utf-8") as f:
        json.dump({}, f)

def load_prefs():
    with open(PREFS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_prefs(prefs):
    with open(PREFS_FILE, "w", encoding="utf-8") as f:
        json.dump(prefs, f, ensure_ascii=False, indent=2)

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers.get("X-Line-Signature", "")
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

@handler.add(JoinEvent)
def handle_join(event):
    msg = ("大家好，我是雙向翻譯助手！\n"
           "用 `/lang 語言代碼` 設定你想看的語言，例如：/lang en\n"
           "可用 `/help` 查看更多指令")
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=msg))

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip()
    prefs = load_prefs()

    if text.lower().startswith("/lang"):
        code = text.split(maxsplit=1)[1] if len(text.split()) > 1 else None
        if code:
            prefs[user_id] = {"target": code}
            save_prefs(prefs)
            reply = f"已將你的目標語言設定為：{code}"
        else:
            reply = "請輸入 /lang 語言代碼，例如 /lang en"
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply))
        return

    if text.lower() == "/mylang":
        lang = prefs.get(user_id, {}).get("target", DEFAULT_TARGET)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"你的目標語言是：{lang}"))
        return

    if text.lower() == "/help":
        help_msg = ("/lang <code> 設定你的目標語言\n"
                    "/mylang 查看設定\n"
                    "我會自動翻譯成員之間的訊息")
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=help_msg))
        return

    # 翻譯邏輯
    src_lang = detect(text)
    for uid, setting in prefs.items():
        target = setting.get("target", DEFAULT_TARGET)
        if uid != user_id and target != src_lang:
            translated = GoogleTranslator(source="auto", target=target).translate(text)
            try:
                line_bot_api.push_message(uid, TextSendMessage(text=f"[翻譯自 {src_lang}] {translated}"))
            except:
                pass

if __name__ == "__main__":
    app.run(port=5000)
